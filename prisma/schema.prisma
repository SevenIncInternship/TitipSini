// Prisma Schema - TitipSini
// Dokumentasi: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////////////////////////
// USER
/////////////////////////////////////////////////////////

/// Represents a user in the system (superadmin, admin, finance, or regular user).
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("user") // superadmin, admin, finance, user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: user bisa memiliki banyak mitra
  mitras Mitra[]
}

/////////////////////////////////////////////////////////
// MITRA
/////////////////////////////////////////////////////////

/// Represents a Mitra (Partner/Vendor) with details, tier, and status.
model Mitra {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  phone       String?
  address     String?
  tier        String                    // bronze, silver, gold
  status      String    @default("pending") // active, suspended, pending
  suspendedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation ke User (owner)
  ownerId String?
  owner   User?     @relation(fields: [ownerId], references: [id])

  // Relation ke branch & invoice
  branches Branch[]
  invoices Invoice[]
}

/////////////////////////////////////////////////////////
// BRANCH (CABANG)
/////////////////////////////////////////////////////////

/// Represents a branch location of a Mitra.
model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation ke Mitra
  mitra   Mitra  @relation(fields: [mitraId], references: [id])
  mitraId String

  // Relation ke transaksi
  transactions Transaction[]
}

/////////////////////////////////////////////////////////
// TRANSACTION
/////////////////////////////////////////////////////////

/// Represents a customer transaction.
model Transaction {
  id              String   @id @default(cuid())
  customerName    String
  itemDescription String
  amount          Float    // ganti dari totalAmount → amount (agar konsisten dengan API)
  status          String   // active, picked_up, overdue
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation ke Branch
  branch   Branch @relation(fields: [branchId], references: [id])
  branchId String
}

/////////////////////////////////////////////////////////
// INVOICE
/////////////////////////////////////////////////////////

/// Represents an invoice issued to a Mitra.
model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  total         Float    // ganti dari amount → total (agar konsisten dengan API)
  dueDate       DateTime
  status        String   @default("pending") // paid, unpaid, overdue
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation ke Mitra
  mitra   Mitra  @relation(fields: [mitraId], references: [id])
  mitraId String
}
